{"version":3,"sources":["App.js","Store/Reducers/Burger.js","Store/Reducers/index.js","Store/index.js","Store/Actions/Burger.js","Components/header/burger.js","Components/header/header.js","serviceWorker.js","index.js"],"names":["App","icon","isHidden","burgerReducer","state","action","basicTimeline","anime","timeline","type","add","targets","ref","current","duration","translateX","easing","createRootReducer","history","combineReducers","router","connectRouter","burger","createBrowserHistory","preloadedState","store","createStore","compose","applyMiddleware","thunkMiddleware","routerMiddleware","BURGER_TURN","BurgerNav","myRef","React","createRef","dispatch","this","className","Button","Component","Header","alteredPosition","onClick","setState","backgroundPositionX","scale","value","Container","Boolean","window","location","hostname","match","library","faCoffee","faBars","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAWeA,MARf,WACE,OACE,6BACE,kBAAC,IAAD,CAAiBC,KAAK,a,uGCJxBC,GAAW,EACFC,EAAgB,WAAiC,IAAhCC,EAA+B,uDAAvB,GAAIC,EAAmB,uCACrDC,GADqD,iCACrCC,IAAMC,YAE1B,OAAQH,EAAOI,MACX,IAAK,cACD,OAAIP,GACAI,EACKI,IAAI,CACDC,QAASN,EAAOO,IAAIC,QACpBC,SAAU,IACVC,WAAY,IACZC,OAAQ,kBAEhBd,GAAW,EACJE,IAEPE,EACKI,IAAI,CACDC,QAASN,EAAOO,IAAIC,QACpBC,SAAU,IACVC,WAAY,EACZC,OAAQ,kBAEhBd,GAAW,EAEJE,GAGf,QACI,OAAOA,ICtBJa,EANW,SAACC,GAAD,OAAaC,YAAgB,CACnDC,OAAQC,YAAcH,GACtBI,OAAQnB,KCCCe,EAAUK,cAgBvB,IAdwBC,EAgBTC,EAfGC,YACVT,EAAkBC,GAClBM,EACAG,YACIC,YACIC,IACAC,YAAiBZ,MChBpBa,EAAc,cCKpB,IAAMC,EAAb,2MACIC,MAAQC,IAAMC,YADlB,oFDFO,IAAoBF,ECMnBR,EAAMW,UDNaH,ECMOI,KAAKJ,MDL5B,CACHxB,KAAMsB,EACNnB,IAAKqB,OCDb,+BAQQ,OACI,yBAAKrB,IAAKyB,KAAKJ,MAAOK,UAAU,aAC5B,yBAAKA,UAAU,mBACf,kBAACC,EAAA,EAAD,CAAQD,UAAU,cACd,yBAAKA,UAAU,kBAAf,UAEJ,kBAACC,EAAA,EAAD,CAAQD,UAAU,cACd,yBAAKA,UAAU,kBAAf,cAfpB,GAA+BJ,IAAMM,WCCxBC,EAAb,2MACIrC,MAAQ,CAAEsC,iBAAiB,GAD/B,EAEIT,MAAQC,IAAMC,YAFlB,wEAIc,IAAD,OACL,OACI,yBAAKG,UAAU,UACX,kBAACC,EAAA,EAAD,CAAQ3B,IAAKyB,KAAKJ,MAAOK,UAAU,SAC/BK,QAAS,WACL,EAAKC,SAAS,CAAEF,iBAAkB,EAAKtC,MAAMsC,kBAC7CnC,YAAM,aACFI,QAAS,EAAKsB,MAAMpB,QACpBgC,oBAAqB,MACrBC,MAAO,CACHC,MAAO,CAAC,EAAG,IACXjC,SAAU,MALb,QAOK,CACFiC,MAAO,CAAC,GAAK,GACbjC,SAAU,SAKtB,kBAAC,IAAD,CAAiBb,KAAK,UAE9B,kBAAC,EAAD,MACA,kBAAC+C,EAAA,EAAD,CAAWV,UAAU,cAChB,+CA5BjB,GAA4BJ,IAAMM,WCMdS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAAQ5C,IAAI6C,IAAUC,KAEtBC,IAASC,OACL,kBAAC,IAAD,CAAUjC,MAAOA,GACb,kBAAC,IAAD,CAAiBP,QAASA,GACtB,kBAAC,IAAD,CAAeyC,SAAS,UACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,SAIZC,SAASC,eAAe,SDuGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d59d6e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <FontAwesomeIcon icon=\"coffee\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import anime from 'animejs'\r\n\r\nvar isHidden = true;\r\nexport const burgerReducer = (state = [], action, burger) => {\r\n    var basicTimeline = anime.timeline();\r\n\r\n    switch (action.type) {\r\n        case 'BURGER_TURN':\r\n            if (isHidden) {\r\n                basicTimeline\r\n                    .add({\r\n                        targets: action.ref.current,\r\n                        duration: 400,\r\n                        translateX: 300,\r\n                        easing: 'easeInOutQuad'\r\n                    })\r\n                isHidden = false\r\n                return state\r\n            } else {\r\n                basicTimeline\r\n                    .add({\r\n                        targets: action.ref.current,\r\n                        duration: 400,\r\n                        translateX: 0,\r\n                        easing: 'easeInOutQuad'\r\n                    })\r\n                isHidden = true\r\n\r\n                return state\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { connectRouter } from 'connected-react-router'\r\nimport { combineReducers } from 'redux'\r\nimport { burgerReducer } from './Burger'\r\n\r\nconst createRootReducer = (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    burger: burgerReducer,\r\n    // other reducers go here with naming convention | name: nameRouter\r\n})\r\n\r\nexport default createRootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createBrowserHistory } from 'history'\r\nimport { routerMiddleware } from 'connected-react-router'\r\n\r\nimport createRootReducer from './Reducers'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nfunction configureStore(preloadedState: any) {\r\n    const store = createStore(\r\n        createRootReducer(history),\r\n        preloadedState,\r\n        compose(\r\n            applyMiddleware(\r\n                thunkMiddleware,\r\n                routerMiddleware(history)),\r\n        )\r\n    )\r\n\r\n    return store\r\n}\r\n\r\nconst store = configureStore()\r\n\r\nexport default store","export const BURGER_TURN = 'BURGER_TURN'\r\nexport const BURGER_OFF = 'BURGER_OFF'\r\n\r\nexport function burgerTurn(myRef) {\r\n    return { \r\n        type: BURGER_TURN,\r\n        ref: myRef\r\n    }\r\n}","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport store from '../../Store'\r\nimport { burgerTurn } from '../../Store/Actions/Burger'\r\n\r\nexport class BurgerNav extends React.Component {\r\n    myRef = React.createRef()\r\n\r\n    componentDidUpdate() {\r\n        store.dispatch(burgerTurn(this.myRef))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.myRef} className=\"burgerNav\">\r\n                <div className=\"transparentBar\"></div>\r\n                <Button className=\"burgerLink\">\r\n                    <div className=\"burgerLinkText\">Users</div>\r\n                </Button>\r\n                <Button className=\"burgerLink\">\r\n                    <div className=\"burgerLinkText\">Test</div>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Button, Container } from 'react-bootstrap'\r\nimport anime from 'animejs'\r\nimport { BurgerNav } from \"./burger\"\r\n\r\nexport class Header extends React.Component {\r\n    state = { alteredPosition: true }\r\n    myRef = React.createRef()\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header\" >\r\n                <Button ref={this.myRef} className=\"burger\"\r\n                    onClick={() => {\r\n                        this.setState({ alteredPosition: !this.state.alteredPosition, })\r\n                        anime({\r\n                            targets: this.myRef.current,\r\n                            backgroundPositionX: '0px',\r\n                            scale: {\r\n                                value: [1, 0.8],\r\n                                duration: 1000\r\n                            },\r\n                            scale:{\r\n                                value: [0.8, 1],\r\n                                duration: 1000\r\n                            }\r\n                        })\r\n                }\r\n                }>\r\n                    <FontAwesomeIcon icon=\"bars\" />\r\n                </Button>\r\n            <BurgerNav />\r\n            <Container className=\"schoolName\">\r\n                {'School name goes here through API call'}\r\n            </Container>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faCoffee, faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Header } from './Components';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store, { history } from './Store';\r\n\r\nlibrary.add(faCoffee, faBars);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <BrowserRouter basename=\"/React\">\r\n                <Header />\r\n                <App />\r\n            </BrowserRouter>\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}